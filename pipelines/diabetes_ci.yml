resources:
  containers:
    - container: mlops
      image: mcr.microsoft.com/mlops/python:latest

pr: none
trigger:
  branches:
    include:
      - master
  paths:
    include:
      - diabetes/
      - ml_service/pipeline/diabetes_build_train_pipeline.py

variables:
  - template: diabetes_variables_template.yml
  - group: devopsforai-aml-vg

pool:
  vmImage: ubuntu-latest

stages:
  - stage: 'Model_CI'
    displayName: 'Model CI'
    jobs:
    - job: 'Model_CI_Pipeline'
      displayName: 'Model CI Pipeline'
      container: mlops
      timeoutInMinutes: 0
      steps:
        - task: AzureCLI@1
          displayName: 'Publish diabetes pipeline'
          inputs:
            azureSubscription: '$(WORKSPACE_SVC_CONNECTION)'
            scriptLocation: inlineScript
            workingDirectory: $(Build.SourcesDirectory)
            inlineScript: |
              set -e
              export SUBSCRIPTION_ID=$(az account show --query id -o tsv)
              python -m ml_service.pipeline.diabetes_build_train_pipeline
  - stage: 'Trigger_AML_Pipeline'
    displayName: 'Train and Evaluate Model'
    condition: succeeded()
    variables: 
      - name: BUILD_BUILDID 
        value: '$(BUILD.BUILDID)'
      - name: BUILD_URI
        value: '$(SYSTEM.COLLECTIONURI)$(SYSTEM.TEAMPROJECT)/_build/results?buildId=$(BUILD.BUILDID)'
    jobs:
      - job: 'Run_Pipeline'
        condition: and(succeeded(),eq(coalesce(variables['auto-trigger-pipeline'],'true'),'true'))
        displayName: 'Run published pipeline for excecution'
        container: mlops
        timeoutInMinutes: 0
        steps:
          - task: AzureCLI@1
            displayName: 'Run pipeline'
            name: 'runpipeline'
            inputs:
              azureSubscription: '$(WORKSPACE_SVC_CONNECTION)'
              scriptLocation: inlineScript
              workingDirectory: '$(Build.SourcesDirectory)'
              inlineScript: |
                set -e
                export SUBSCRIPTION_ID=$(az account show --query id -o tsv)
                python -m ml_service.pipeline.run_train_pipeline --output-write-file 'pipeline_id.txt'
                AMLPIPELINEID="$(cat pipeline_id.txt)"
                echo "##vso[task.setvariable variable=AMLPIPELINEID;isOutput=true]$AMLPIPELINEID"
      - job: 'Training_Report'
        dependsOn: 'Run_Pipeline'
        displayName: 'check if model is registered'
        container: mlops
        condition: always()
        timeoutInMinutes: 0
        steps:
          - template: diabetes_publish_model_artifacts_template.yml

        
             


          
