from dataclasses import dataclass
import os
from typing import Optional

@dataclass(frozen=True)
class ENV:
    workspace_name: Optional[str] = os.environ.get('WORKSPACE_NAME')
    subscription_id: Optional[str] = os.environ.get('SUBSCRIPTION_ID')
    resource_group: Optional[str] = os.environ.get('RESOURCE_GROUP')
    vm_priority: Optional[str] = os.environ.get('AML_CLUSTER_PRIORITY','lowpriority')
    vm_priority_scoring: Optional[str] = os.environ.get('AML_CLUSTER_PRIORITY_SCORING','lowpriority')
    vm_size: Optional[str] = os.environ.get('AML_COMPUTE_CLUSTER_CPU_SKU')
    min_nodes: Optional[int] = int(os.environ.get('AML_CLUSTER_MIN_NODES',0))
    min_nodes_scoring: Optional[int] = int(os.environ.get('AML_CLUSTER_MIN_NODES_SCORING',0))
    max_nodes: Optional[int] = int(os.environ.get('AML_CLUSTER_MAX_NODES',4))
    max_nodes_scoring: Optional[int] = int(os.environ.get('AML_CLUSTER_MAX_NODES_SCORING',4))
    source_train_directory: Optional[str] = os.environ.get('SOURCE_TRAIN_DIRECTORY','diabetes')
    aml_conda_train_dependent_files: Optional[str] = os.environ.get('AML_CONDA_TRAIN_DEPENDENT_FILES','conda_dependencies.yml')
    aml_env_name: Optional[str] = os.environ.get('AML_ENV_NAME')
    aml_env_scoring_name: Optional[str] = os.environ.get('AML_ENV_SCORING_NAME')
    aml_env_scorecopy_name: Optional[str] = os.environ.get('AML_ENV_SCORECOPY_NAME')
    rebuild_env: Optional[bool] = os.environ.get('AML_REBUILD_ENVIRONMENT')
    model_name: Optional[str] = os.environ.get('MODEL_NAME')
    model_version: Optional[str] = os.environ.get('MODEL_VERSION')
    dataset_name: Optional[str] = os.environ.get('DATASET_NAME')
    build_id: Optional[str] = os.environ.get('BUILD_BUILDID')
    pipeline_name: Optional[str] = os.environ.get('TRAINING_PIPELINE_NAME')
    compute_name: Optional[str] = os.environ.get('AML_COMPUTE_CLUSTER_NAME')
    datastore_name: Optional[str] = os.environ.get('DATASTORE_NAME')
    dataset_version: Optional[str] = os.environ.get('DATASET_VERSION')
    train_script_path: Optional[str] = os.environ.get('TRAIN_SCRIPT_PATH')
    eval_script_path: Optional[str] = os.environ.get('EVAL_SCRIPT_PATH')
    register_script_path: Optional[str] = os.environ.get('REGISTER_SCRIPT_PATH')
    allow_run_cancel: Optional[str] = os.environ.get('ALLOW_RUN_CANCEL')
    run_evaluation: Optional[str] = os.environ.get('RUN_EVALUATION')
    experiment_name: Optional[str] = os.environ.get('EXPERIMENT_NAME')
    build_uri: Optional[str] = os.environ.get('BUILD_URI')
    scoring_datastore_access_key: Optional[str] = os.environ.get('SCORING_DATASTORE_ACCESS_KEY')
    scoring_datastore_input_container: Optional[str] = os.environ.get('SCORING_DATASTORE_INPUT_CONTAINER')
    scoring_datastore_output_container: Optional[str] = os.environ.get('SCORING_DATASTORE_OUTPUT_CONTAINER')
    scoring_datastore_storage_name : Optional[str] = os.environ.get('SCORING_DATASTORE_STORAGE_NAME')
    scoring_datastore_input_filename: Optional[str] = os.environ.get('SCORING_DATASTORE_INPUT_FILENAME')
    scoring_dataset_name: Optional[str] = os.environ.get('SCORING_DATASET_NAME')
    scoring_pipeline_name: Optional[str] = os.environ.get('SCORING_PIPELINE_NAME')
    use_gpu_for_scoring: Optional[str] = os.environ.get('USE_GPU_FOR_SCORING')
    aml_rebuild_scoring_env: Optional[str] = os.environ.get('AML_REBUILD_SOCRING_ENV')
    batchscore_script_path: Optional[str] = os.environ.get('BATCHSCORE_SCRIPT_PATH')
    batch_scorecopy_script_path: Optional[str] = os.environ.get('BATCH_SCORECOPY_SCRIPT_PATH')
    max_nodes_scoring: Optional[int] = os.environ.get('AML_MAX_NODES_FOR_SCORING')
    aml_conda_score_file: Optional[str] = os.environ.get('AML_CONDA_SCORE_FILE')
    aml_conda_scorecopy_file: Optional[str] = os.environ.get('AML_CONDA_SCORECOPY_FILE')
    compute_scoring_name: Optional[str] = os.environ.get('AML_COMPUTE_CLUSTER_SCORING')